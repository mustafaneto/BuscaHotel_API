// <auto-generated />
using System;
using BuscaHotel_HotelAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BuscaHotel_HotelAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230329140252_AddIdentityUserTable")]
    partial class AddIdentityUserTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BuscaHotel_HotelAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BuscaHotel_HotelAPI.Models.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Area")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Diaria")
                        .HasColumnType("float");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ocupacao")
                        .HasColumnType("int");

                    b.Property<string>("Servicos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Hoteis");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Area = 500,
                            DataAtualizacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCriacao = new DateTime(2023, 3, 29, 11, 2, 52, 496, DateTimeKind.Local).AddTicks(9678),
                            Descricao = "O hotel localizado em Rio Branco, Acre, próximo ao shopping e supermercados é uma excelente opção para quem busca conforto e conveniência durante a estadia na cidade. Com a sua localização privilegiada, os hóspedes têm fácil acesso a diversas opções de compras, alimentação e entretenimento.",
                            Diaria = 200.0,
                            ImagemUrl = "https://static.showit.co/800/vtY9NPGcQUynJd1xRFSrOg/72275/gina_and_ryan_photography_-_acre_2017_-_064.jpg",
                            Nome = "Rio Branco Hotel",
                            Ocupacao = 5,
                            Servicos = ""
                        },
                        new
                        {
                            Id = 2,
                            Area = 900,
                            DataAtualizacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCriacao = new DateTime(2023, 3, 29, 11, 2, 52, 496, DateTimeKind.Local).AddTicks(9693),
                            Descricao = "Localizado na cidade de Cruzeiro do Sul, Acre, este hotel é uma excelente opção para quem busca conforto e praticidade. Com quartos amplos e bem equipados, o hotel oferece um ambiente agradável e acolhedor para os hóspedes. Além disso, conta com uma área de lazer com piscina, sauna e academia, tornando a estadia ainda mais relaxante.",
                            Diaria = 500.0,
                            ImagemUrl = "https://goop-img.com/wp-content/uploads/2018/01/Gina-Ryan-Photography-Acre-2017-032.jpg",
                            Nome = "Cruzeiro do Sul Hotel",
                            Ocupacao = 5,
                            Servicos = ""
                        },
                        new
                        {
                            Id = 3,
                            Area = 750,
                            DataAtualizacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCriacao = new DateTime(2023, 3, 29, 11, 2, 52, 496, DateTimeKind.Local).AddTicks(9695),
                            Descricao = " O Sena Madureira Hotel está situado na cidade de Sena Madureira, Acre, e é ideal para quem busca um ambiente mais tranquilo e próximo à natureza. Com uma ampla área verde ao redor do hotel, os hóspedes podem desfrutar de uma atmosfera mais calma e agradável. Além disso, o hotel oferece atividades ao ar livre como trilhas ecológicas, pesca esportiva e passeios de barco.",
                            Diaria = 100.0,
                            ImagemUrl = "https://static.showit.co/1200/xVOR7ZFYQGqkRCPXUxMAIg/72275/acre_resort_pool.jpg",
                            Nome = "Sena Madureira Hotel",
                            Ocupacao = 5,
                            Servicos = ""
                        },
                        new
                        {
                            Id = 4,
                            Area = 800,
                            DataAtualizacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCriacao = new DateTime(2023, 3, 29, 11, 2, 52, 496, DateTimeKind.Local).AddTicks(9696),
                            Descricao = "Localizado na cidade de Quinari, Acre, este hotel é uma excelente opção para quem procura um ambiente mais intimista e acolhedor. Com um design moderno e aconchegante, o hotel oferece quartos confortáveis e bem equipados. Além disso, conta com um restaurante que serve pratos típicos da culinária regional, proporcionando uma experiência gastronômica única aos hóspedes.",
                            Diaria = 250.0,
                            ImagemUrl = "https://static.showit.co/1200/8n7f7DqLRpG2flPGfuDCEA/72275/gina_and_ryan_photography_-_acre_2017_-_115_web.jpg",
                            Nome = "Quinari Hotel",
                            Ocupacao = 4,
                            Servicos = ""
                        },
                        new
                        {
                            Id = 5,
                            Area = 400,
                            DataAtualizacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCriacao = new DateTime(2023, 3, 29, 11, 2, 52, 496, DateTimeKind.Local).AddTicks(9698),
                            Descricao = "Situado na cidade de Brasileia, Acre, este hotel é ideal para quem busca um ambiente mais urbano e conectado. Com quartos modernos e bem equipados, o hotel oferece uma excelente estrutura para quem está a negócios ou lazer. Além disso, conta com uma localização privilegiada, próximo a restaurantes, bares e lojas, tornando a estadia ainda mais prática e conveniente.",
                            Diaria = 300.0,
                            ImagemUrl = "https://www.travelandleisure.com/thmb/C9j_ENR2mCCTAKr64UGCJY-ZLsM=/750x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/bedroom-acre-baja-CABOHOTELMEZCAL0721-e39f5592b7fd45d6923018edd02d22ef.jpg",
                            Nome = "Brasiléia Hotel",
                            Ocupacao = 4,
                            Servicos = ""
                        });
                });

            modelBuilder.Entity("BuscaHotel_HotelAPI.Models.HotelNumber", b =>
                {
                    b.Property<int>("HotelNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("DetalhesEspeciais")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelID")
                        .HasColumnType("int");

                    b.HasKey("HotelNo");

                    b.HasIndex("HotelID");

                    b.ToTable("HotelNumbers");
                });

            modelBuilder.Entity("BuscaHotel_HotelAPI.Models.LocalUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LocalUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BuscaHotel_HotelAPI.Models.HotelNumber", b =>
                {
                    b.HasOne("BuscaHotel_HotelAPI.Models.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BuscaHotel_HotelAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BuscaHotel_HotelAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuscaHotel_HotelAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BuscaHotel_HotelAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
